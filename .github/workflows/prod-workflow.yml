name: Prod deploy

on:
  push:
    branches:
      - main

env:
  CARGO_TERM_COLOR: always

jobs:
  test-api:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          ssh-key: ${{ secrets.PULL_KEY_REPO }}

      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: clippy, rustfmt
          target: wasm32-unknown-unknown
          toolchain: stable
      - name: Install PostgreSQL Client
        run: sudo apt-get install -y postgresql-client

      - name: Initialize Database SQL
        run: |
          psql postgresql://postgres:postgres@localhost:5432/test -f ./deps/rust-sdk/fixtures/sql/init.sql

      - name: test
        env:
          RUSTFLAGS: "-A warnings"
          DATABASE_TYPE: postgres
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test
        run: |
          cd packages/main-api
          cargo test --tests

  web-deployment:
    runs-on: ubuntu-22.04
    needs: [test-api]

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          ssh-key: ${{ secrets.PULL_KEY_REPO }}

      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: clippy, rustfmt
          target: wasm32-unknown-unknown
          toolchain: stable
      - uses: cargo-bins/cargo-binstall@main
      - name: Cache builder
        id: web-cache-builder
        uses: actions/cache@v3
        with:
          key: web-cache-builder
          path: |
            target

      - name: Install dependencies
        run: |
          cargo binstall dioxus-cli
          cargo binstall toml-cli
          npm install -g aws-cdk tailwindcss@3

      - name: Deploy APIs
        env:
          REGION: ap-northeast-2
          ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          KAKAO_CLIENT_ID: ${{ secrets.KAKAO_APP_KEY }}
          ENV: prod
          SERVICE: main-ui
          BASE_DOMAIN: votekorea.org
          DOMAIN: votekorea.org
          VERSIONS: v1
          MAIN_API_ENDPOINT: https://api.votekorea.org
          V1_ENDPOINT: api.votekorea.org
          ENABLE_S3: true
          CREATE_RDS: false
          ENABLE_LAMBDA: true

        run: |
          make deploy-web-if-needed

  api-deployment:
    runs-on: ubuntu-22.04
    needs: [test-api]

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          ssh-key: ${{ secrets.PULL_KEY_REPO }}

      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: clippy, rustfmt
          target: wasm32-unknown-unknown
          toolchain: stable

      - uses: cargo-bins/cargo-binstall@main
      - name: Install dependencies
        run: |
          cargo binstall toml-cli

      - name: API Cache builder
        id: api-cache-builder
        uses: actions/cache@v3
        with:
          key: api-cache-builder
          path: |
            target

      - name: Deploy APIs
        env:
          REGION: ap-northeast-2
          ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          RDS_ADMIN_PASSWORD: ${{ secrets.PROD_RDS_ADMIN_PASSWORD }}
          JWT_SECRET_KEY: ${{ secrets.PROD_JWT_SECRET }}
          DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}
          ENV: prod
          SERVICE: main-api
          BASE_DOMAIN: votekorea.org
          DOMAIN: api.votekorea.org
          ENABLE_S3: false
          CREATE_RDS: true
          ENABLE_LAMBDA: true
        run: |
          npm i -g aws-cdk
          make deploy-if-needed
